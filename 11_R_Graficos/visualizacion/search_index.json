[
["rmarkdown-y-shiny.html", "3 Rmarkdown y shiny 3.1 Rmarkdown 3.2 Shiny", " 3 Rmarkdown y shiny Esta sección está dedicada a dos extensiones de R: shiny y rmarkdown. El primero de ellos permite crear cuadros de mando interactivos. El segundo, documentos automatizados que combinan texto con código, tablas y gráficos generados directamente por R. Estos dos paquetes no son complejos sino, más bien, extensos y llenos de detalles. El objetivo de esta sesión es recorrer sus posibilidades. 3.1 Rmarkdown Rmarkdown permite generar documentos dinámicos al mezclar texto formateado y resultados generados por R. Los documentos generados pueden estar en HTML, PDF, Word y muchos otros formatos. Las ventajas de esta herramienta son numerosas: El código y sus resultados no están separados de los comentarios asociados a ellos El documento final es reproducible El documento se puede actualizar fácilmente, por ejemplo, si los datos de origen se han modificado. Por lo tanto, es una herramienta muy práctica para exportar, comunicar y difundir resultados estadísticos. Este documento se ha generado a partir de archivos R Markdown ^ [Más precisamente gracias a la extensión bookdown que permite generar documentos de tipo libro]. Aprender Rmarkdown implica aprender dos cosas distintas: Markdown, un formato para escribir documentos simples en modo texto. Tiene la ventaja de ser fácilmente legible por humanos pero, a la vez, procesable programáticamente para volcarlos en otros formatos: pdf, html, … La integración entre R y markdown Aquí, un documento de R Markdown básico: --- title: &quot;Ejemplo de R Markdown&quot; output: pdf_document --- *R Markdown* permite mezclar : - texto libre puesto en formato - bloques de codigo de R Los bloques de codigo se pueden ejecutar para incluir sus resultados en el documento, así por ejemplo : ```{r} mean(airquality$Ozone,na.rm=TRUE) ``` ## Gráficos Se puede también incluir __gráficos__ : ```{r} plot(Ozone~Temp,data=airquality,bg=&quot;lightblue&quot;,pch=21) ``` Al “compilar” el documento, el texto se formatea, los bloques de código se ejecutan, sus resultados se agregan al documento y todo se transforma en uno de los diferentes formatos posibles (html, pdf, word, …). Aquí, la representación del documento anterior en formato HTML 3.1.1 Rmarkdown en 15 mn Para aprender Markdown, se recomiendan los dos siguientes ejercicios : Crear un fichero .Rmd usando File &gt; New File &gt; R Markdown. Al crear un nuevo fichero de tipo R Markdown, RStudio proporciona, en lugar de uno vacío, una plantilla que muestra algunas de las opciones disponibles en este formato. Eso facilita el siguiente ejercicio: Modificar el fichero de ejemplo creado en el ejercicio anterior añadiéndole títulos de varios niveles, párrafos de texto, cursivas, negritas, enlaces, listas (numeradas y sin numerar), etc. usando como guía el Cheat Sheet del paquete. Compilar el documento (p.e., pulsando el botón con la etiqueta Knit HTML situado encima del panel de edición de RStudio) para inspeccionar el resultado final. Se puede también generar documentos en formato Word y PDF. Para estos formato, es necesario tener instalados los programas : MS Word, LibreOffice o similar para el primero y LaTeX para el segundo. El segundo de los componentes de Rmarkdown (y lo que lo diferencia de Markdown a secas) es la posibilidad de incorporar bloques de código en el hilo del documento. Estos bloques de código se procesan durante la compilación del documento y los resultados que generan (tablas, gráficos, etc.) se integran en la salida. La plantilla de fichero Rmarkdown que genera RStudio incluye unos cuantos ejemplos de bloques de código. Insertar sobre el documento (o sobre una nueva plantilla) bloques de código de R que hagan alguna cosa. Los bloques de código incluyen opciones en su encabezamiento (p.e., para que un bloque se ejecute o no; para que el código se muestre o se oculte en el documento final, etc.). Las opciones disponibles se pueden consultar en el Cheat Sheet del paquete. 3.1.2 Elementos de un documento Rmarkdown 3.1.2.1 Encabezado (préambulo) La primera parte del documento es su encabezado. Se encuentra al principio del documento y está delimitado por tres guiones (---) antes y después: --- title: &quot;Titulo&quot; author: &quot;Nombre Apellido&quot; date: &quot;2 de mayo de 2018&quot; output: html_document --- Este encabezado contiene los metadatos del documento, como su título, autor, fecha, más una serie de opciones posibles que permiten configurar o personalizar todo el documento y su representación. Aquí, por ejemplo, la línea output: html_document indica que el documento generado tendrá un formato HTML. 3.1.2.2 Texto del documento El cuerpo del documento consiste en texto con la sintaxis de Markdown: un marcado ligero que permite establecer niveles de títulos o formatear texto. Por ejemplo, el siguiente texto: Este es un texto *en cursiva* y **en negrita**. Se puede definir una lista así: - primer elemento - segundo elemento Que dará la siguiente salida Este es un texto en cursiva y en negrita. Se puede definir una lista así: primer elemento segundo elemento Los títulos de diferentes niveles se pueden definir comenzando una línea con uno o más caracteres #: # Titulo de nivel 1 ## Titulo de nivel 2 ### Titulo de nivel 3 Cuando se han definido los títulos, al hacer clic en el icono Show document outline en el extremo derecho de la barra de herramientas asociada al archivo, se muestra una tabla dinámica de contenidos generada automáticamente a partir de los títulos que permite navegar fácilmente en el documento. La sintaxis de Markdown permite también insertar enlaces o imágenes. Por ejemplo, la siguiente sintaxis: [Kschool](https://kschool.com) Dará el siguiente vinculo: Kschool En RStudio, el menú Help y luego Markdown quick reference proporciona una descripción más completa de la sintaxis. 3.1.2.3 Bloques de codigo Además del texto libre en formato Markdown, un documento R Markdown contiene, como su nombre indica, código R. Este código se incluye en fragmentos definidos por la siguiente sintaxis: Como esta cadena de caracteres no es muy fácil de escribir, se puede usar R en el menú Insertar de RStudio, o teclear el atajo Ctrl+Alt+i. Se puede dar un nombre al bloque y se indica directamente después de r: {r nombre_del_bloque} No es obligatorio, pero puede ser útil en caso de error de compilación, para identificar el bloque que causó el problema. Atención, no podemos tener dos bloques con el mismo nombre. Además de un nombre, se puede pasar a un bloque una serie de opciones para modificar su comportamiento. ```{r echo = FALSE, warning = FALSE} x &lt;- 1:5 ``` Una de las opciones más útiles es la opción echo. Por defecto echo=TRUE, y el bloque de código R se inserta en el documento generado: x &lt;- 1:5 print(x) ## [1] 1 2 3 4 5 Pero, si la opción echo=FALSE, entonces el código R ya no se inserta en el documento, y solo se el resultado será visible: ## [1] 1 2 3 4 5 Aquí hay una lista de algunas de las opciones más comunes: opción valores descripción echo TRUE / FALSE Mostrar o no el código R en el documento eval TRUE / FALSE Ejecutar o no el código R en tiempo de compilación warning TRUE / FALSE Mostrar o no las advertencias generadas por el bloque message TRUE / FALSE Mostrar o no los mensajes generados por el bloque Hay muchas otras opciones descritas en la Guía de referencia de R Markdown. 3.1.3 Tablas con Rmarkdown 3.1.3.1 Tablas cruzadas Por defecto, las tablas generadas por la función table se muestran tal y como aparecen en la consola de R, es decir, en texto sin formato: # titanic&lt;-ftable(Survived~Class,data=Titanic) # Supervivencia al Titanic según clase titanic&lt;-apply(Titanic,c(1,4),sum) titanic ## Survived ## Class No Yes ## 1st 122 203 ## 2nd 167 118 ## 3rd 528 178 ## Crew 673 212 Su presentación se puede mejorar utilizando la función kable de la extensión knitr: library(knitr) kable(titanic,caption=&quot;Supervivencia a la catastrofe del Titanic según la clase&quot;) Table 3.1: Supervivencia a la catastrofe del Titanic según la clase No Yes 1st 122 203 2nd 167 118 3rd 528 178 Crew 673 212 3.1.3.2 Base de datos Respecto a las bases de datos (tibble o data.frame), la presentación HTML por defecto es el contenido que aparece en consola. Este formato puede ser poco adecuado si la tabla excede una cierta dimensión. Una alternativa es usar la función paged_table, que muestra una representación HTML paginada de la base: require(ggplot2) rmarkdown::paged_table(mpg) Otra alternativa es la función datatable de la extensión DT, que ofrece aún más interactividad: library(DT) datatable(mpg) En cualquier caso, no es recomendable mostrar una tabla de datos muy grandes de esta manera porque el archivo HTML resultante contendría todos los datos y, por lo tanto, sería muy grande. 3.2 Shiny shiny es un paquete de R para la construcción de cuadros de mando web interactivos. Permite, por ejemplo, crear interfaces para algoritmos o acceder y manipular tablas de datos a través de controles de HMTL: sliders, botones, etc. El paquete proporciona varias aplicaciones de ejemplo que usaremos para aprender los rudimentos de shiny. Por ejemplo, se puede hacer library(shiny) runExample(example = &quot;01_hello&quot;) para desplegar la aplicación de ejemplo 01_hello. Esta aplicación pinta en el panel central un histograma y tiene en el lateral un slider con el que modular su granularidad (técnicamente, para definir el número de pedazos, breaks, en los que partir el rango de valores del vector subyacente). Para detener la aplicación, en RStudio, presiona sobre el icono de la señal de stop (en la parte superior de la ventana de la consola); en una terminal, usa Control-C para interrumpir la ejecución. Ejecuta runExample() (sin argumento); el mensaje de error indica qué otros ejemplos además de 01_hello están disponibles por defecto. Échales un vistazo a algunos. Crea tu primera aplicación en shiny. Para ello, despliega 01_hello. Luego, copia los ficheros ui.r y server.r en un nuevo directorio vacío. Llámalo, por ejemplo, prueba00. Luego ejecuta runApp(“prueba00”) para desplegarla. (Nota: el argumento de runApp tiene que ser la ruta, sea absoluta o relativa, del directorio en cuestión; recuerda que una aplicación en shiny recibe el nombre del directorio que la contiene). El ejercicio anterior muestra cómo construir aplicaciones en shiny. Una aplicación en shiny es un directorio que da nombre a la aplicación. Dentro de él tiene que haber, como mínimo, dos ficheros: ui.r y server.r. El primero define la interfaz de la aplicación. El segundo realiza los cálculos en segundo plano cada vez que el usuario manipula los controles de la interfaz. Además de estos ficheros, en aplicaciones más complejas, puede haber otros organizados o no en subdirectorios: datos, otros ficheros auxiliares de código, logos, CSSs, imágenes estáticas, etc. Tendrás que leer la documentación de shiny para averiguar cómo y dónde colocar estos recursos adicionales. ui.r y server.r se comunican entre sí: ui.r tiene que pasarle parámetros a server.r y este resultados a aquel. Esto se hace a través de variables y estructuras de datos con una forma muy particular. El siguiente ejercicio está pensado para que descubras el mecanismo de comunicación. Se te va a pedir que traduzcas el nombre de las variables y los parámetros al español. Obviamente, al traducir las variables en uno de los ficheros se romperá la aplicación. Realinear los nombres en el otro fichero te servirá para identificar los mecanismos de comunicación. Crea prueba01 como una copia de prueba00. Entonces, traduce al español el nombre de todas las variables implicadas en la aplicación. El siguiente ejercicio te enseñará a modificar la interfaz de una aplicación en shiny, incorporar nuevos controles y añadir el código subyacente para que responda adecuadamente. Añade a la aplicación prueba01 otro slider que mueva una linea vertical roja que dibujes sobre el histograma. Es recomendable que comiences, y en este orden, añadiendo una línea roja en algún punto (del eje x) prefijado con la función abline, incorporando el slider y finalmente, vinculando el valor proporcionado por el slider al punto del eje x. Nota: cuando modifiques ui.r, presta atención a la estructura del programa y cómo se corresponde a la de la interfaz web: qué es lo que va en la barra lateral, qué en el panel central, etc. Ten cuidado además con los paréntesis: ¡hay muchos y es fácil desemparejarlos! Inspecciona el tutorial de shiny (http://shiny.rstudio.com/tutorial/) para descubrir qué tipo widgets (además de sliders) existen, cómo se procesan esos inputs en server.r, etc. Recuerda que ese tutorial es la principal fuente de información sobre todo lo relacionado con shiny. Visita la galería de aplicaciones de shiny (http://shiny.rstudio.com/gallery/) para investigar cómo implementar controles, qué tipos adicionales de paneles existen, etc. Uno de los asuntos (avanzados) que se discuten en esas páginas es el de las reacciones: shiny está basado en un tipo de programación denominada reactiva, que es la que permite que las funciones de server.r simulen estar escuchando (y reaccionen) a los cambios que realiza el usuario en los controles de la aplicación. Puedes buscar en Internet más información sobre la programación reactiva si te interesa el tema. "]
]
